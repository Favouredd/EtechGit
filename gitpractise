>Etechconsulting LLC All Rights Reserved


-----------
Introduction to Git and Github :



How to push changes to a remote repo in Git:
When all your work is ready to be saved on a remote repository, you can push all changes using the command below:

$git push


How to see remote URLs in Git:
You can see all remote repositories for your local repository with this command:

$git remote -v


How to push changes to a remote repo in Git:
When all your work is ready to be saved on a remote repository, you can push all changes using the command below:

$git push

How to fetch remote repo changes in Git:
This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead).

$git fetch


How to pull changes from a remote repo in Git:
If other team members are working on your repository, you can retrieve the latest changes made to the remote repository with the command below:

$git pull


How to check remote branches that Git is tracking:
This command shows the name of all remote branches that Git is tracking for the current repository:

$git branch -r


Ignoring files:

To ignore files that you don't want to be tracked or added to the staging area, you can create a
file called .gitignore in your main project folder. Inside of that file, you can list all the file
and folder names that you definitely do not want to track (each ignored file and folder should go
to a new line inside the .gitignore file) 

$touch .gitignore,  list the names or extensions of auto-generated files and folders to to it, commit and push upstream. Do a rfresh and watch what happens



>Branches:

A branch could be interpreted as an individual timeline of our project commits. With Git, we can
create many of these alternative environments (i.e. we can create different branches) so other
versions of our project code can exist and be tracked in parallel That allows us to add new
(experimental, unfinished, and potentially buggy) features in separate branches, without touching
the 'official' stable version of our project code (which is usually kept on the master branch) When
we initialize a repository and start making commits, they are saved to the master branch by
default.

>Creating a new branch: 
You can create a new branch using the following command 
$git branch <new-branch-name>

The new branch that gets created will be the reference to the current state of your repository It's
a good idea to create a **development** branch where you can work on improving your code, adding
new experimental features, and similar. After development and testing these new features to make
sure they don't have any bugs and that they can be used, you can merge them to the master branch.


>Changing branches

To switch to a different branch, you use the git checkout command:

$git checkout <branch-name>
$git checkout master:

With that, you switch to a different isolated timeline of your project by changing branches.

For example, you could be working on different features in your code and have a separate branch for
each feature. When you switch to a branch, you can commit code changes which only affect that
particular branch. Then, you can switch to another branch to work on a different feature, which
won't be affected by the changes and commits made from the previous branch.
For example, you could be working on different features in your code and have a separate branch for each feature. When you
switch to a branch, you can commit code changes which only affect that particular branch. Then, you
can switch to another branch to work on a different feature, which won't be affected by the changes
and commits made from the previous branch. To create a new branch and change to it at the same
time, you can use the -b flag:

$git checkout -b <new-branch-name>

To list the branches for your project, use this command: `git branch` To go back to the master
branch, use this command:

$git branch (to list branches for your project )

$git checkout master

>Merging branches

You can merge branches in situations where you want to implement the code changes that you made in
an individual branch to a different branch. For example, after you fully implemented and tested a
new feature in your code, you would want to merge those changes to the stable branch of your
project (which is usually the default master branch). To merge the changes from a different branch
into your current branch, you can use this command 

$git merge <branch-name>

You would replace <branch-name> with the branch that you want to integrate into your current branch




>Deleting a branch

To delete a branch, you can run the git branch command with the -d flag

$git branch -d <branch-name>


How to show the commit log as a graph in Git:
We can use --graph to get the commit log to show as a graph. Also,
--oneline will limit commit messages to a single line.

$git log --graph --oneline


How to show the commit log as a graph of all branches in Git:
Does the same as the command above, but for all branches.

$git log --graph --oneline --all

How to abort a conflicting merge in Git:
If you want to throw a merge away and start over, you can run the following command:

$git merge --abort



How to add a remote repository in Git:
This command adds a remote repository to your local repository (just replace https://repo_here with your remote repo URL).

$git add remote https://repo_here


How to get more info about a remote repo in Git:
Just replace origin with the name of the remote obtained by
running the git remote -v command.

$git remote show origin





How to check remote branches that Git is tracking:
This command shows the name of all remote branches that Git is tracking for the current repository:

$git branch -r




How to check the current commits log of a remote repo in Git
Commit after commit, Git builds up a log. You can find out the remote repository log by using this command:

$git log origin/main

How to merge a remote repo with your local repo in Git:
If the remote repository has changes you want to merge with your local, then this command will do that for you:

$git merge origin/main


How to get the contents of remote branches in Git without automatically merging:
This lets you update the remote without merging any content into the
local branches. You can call git merge or git checkout to do the merge.

$git remote update


How to push a new branch to a remote repo in Git:
If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream:

git push -u origin branch_name


How to remove a remote branch in Git:
If you no longer need a remote branch you can remove it using the command below:

git push --delete origin branch_name_here


what does git show does:
For commits it shows the log message and textual diff. It also presents the merge commit in a special format.  
Git show describes the HEAD commit by default. 